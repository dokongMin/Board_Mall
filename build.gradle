buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'jacoco'
}

group = 'com.dokong'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.redisson:redisson-spring-boot-starter:3.17.5'
	implementation 'it.ozimov:embedded-redis:0.7.2'
//	compile group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝

jar{
	enabled = false
}

// jacoco 설정

private excludedClassFilesForReport(classDirectories) {
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						"**/Q*",
						"**/*Dto*",
						"**/*Dto",
						"**/*Application*",
						"**/*Config*"
				])
			})
	)
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false

// 리포트의 저장 경로를 설정합니다.
		html.destination file("jacoco/jacocoHtml")
		xml.destination file("jacoco/jacoco.xml")
	}

	excludedClassFilesForReport(classDirectories)

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	excludedClassFilesForReport(classDirectories)
	violationRules { // 커버리지의 범위와 퍼센테이지를 설정합니다.
		rule {
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.40
			}


		}
	}
}